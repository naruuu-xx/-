//编写人：naruuu
//编写功能：线性顺序表的合并
#include <bits/stdc++.h>
#include <iostream>
#include<cstdlib>
using namespace std;
#define MAXSIZE 100
#define OK 1
#define ERROR -1
#define Status int
#define ElemType int

typedef struct sqlist
{
	ElemType* elem;
	int length;
}SqList;



Status InitList(SqList& L)
{
	L.elem = new ElemType[MAXSIZE];
	if (!L.elem) exit(OVERFLOW);
	L.length = 0;
	return OK;
}

Status GetElem(SqList L, int i, ElemType& e)
{
	if (i<1 || i>L.length) return ERROR;
	e = L.elem[i - 1];
	return OK;
}


int LocateElem(SqList L, ElemType e)
{
	int i;
	for (i = 0; i < L.length; i++)
		if (L.elem[i] == e) return i + 1;
	return 0;
}


Status ListInsert(SqList& L, int i, ElemType e)
{
	int j;
	if (i<1 || i>L.length + 1) return ERROR;
	if (L.length == MAXSIZE) return ERROR;
	for (j = L.length - 1; j >= i - 1; j--)
		L.elem[j = 1] = L.elem[j];
	L.elem[i - 1] = e;
	++L.length;
	return OK;
}


Status ListDelete(SqList& L, int i, ElemType& e)
{
	int j;
	if (i < 1 || (i > L.length)) return ERROR;
	e = L.elem[i - 1];
	for (j = i; j <= L.length - 1; j++)
		L.elem[j - 1] = L.elem[j];
	--L.length;
	return OK;
}
Status CombList(SqList L, SqList S ,SqList &T)
{
	int l, s, i,j,k=0;
	int tmp = 0;
	l = L.length;
	s = S.length;
	T.length = l + s;
	for (i = 0; i < l; i++)
	{
		T.elem[i] = L.elem[i];
	}
	for (j = l; j < (s + l); j++)
	{
		T.elem[j ] = S.elem[k];
		k++;
	}
	return OK;
}
void MergeList_Sq(SqList L, SqList S, SqList& T)
{
	int *pl, *ps,  *pt;
	int* pl_end, * ps_end;
	T.length = L.length + S.length;
	T.elem = new ElemType[MAXSIZE];
	pt = T.elem;
	pl = L.elem;
	ps = S.elem;
	pl_end = L.elem + L.length - 1;
	ps_end = S.elem + S.length - 1;
	while ((pl <= pl_end) && (ps <= ps_end))
	{
		if (*pl < *ps)
			*pt++ = *pl++;
		else
			*pt++ = *ps++;
	}
	while (pl <= pl_end)
		*pt++ = *pl++;
	while (ps <= ps_end)
		*pt++ = *ps++;
}


void  printList(SqList L)
{
	for (int i = 0; i < L.length; i++)
		cout << L.elem[i] << "  ";
	cout << endl;
} 



int main()
{
	SqList L;
	SqList S;
	SqList T;
	InitList(L); 
	ListInsert(L, 1, 10);	ListInsert(L, 2, 20); ListInsert(L, 3, 30); 
	InitList(S);
	ListInsert(S, 1, 40);	ListInsert(S, 2, 50); ListInsert(S, 3, 60); ListInsert(S, 4, 70);
	InitList(T);
	if(CombList(L, S,T))
		printList(T);
	MergeList_Sq(L, S, T);
	printList(T);

	return 0;
}





测试结果：


10  20  30  40  50  60  70
10  20  30  40  50  60  70

